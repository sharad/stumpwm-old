#-(or sbcl clisp openmcl ecl (and lispworks6 (not lispworks-personal-edition)))
(error "This lisp implementation is not supported.")

#+lispworks
(progn
  (load-all-patches)
  (lw:set-default-character-element-type 'lw:simple-char)

  (unless
      (dolist (install-path
               '("quicklisp" ".quicklisp"))
        (let ((quicklisp-init
                (merge-pathnames (make-pathname :directory `(:relative ,install-path)
                                                :name "setup.lisp")
                                 (user-homedir-pathname))))
          (when (probe-file quicklisp-init)
            (load quicklisp-init)
            (return t))))

    (error "Quicklisp must be installed in order to build StumpWM with ~S."
           (lisp-implementation-type))))

(require 'asdf)
(require 'asdf  #+clisp'("asdf.lisp"))
(require 'in.net.sharad.utils  #+clisp'("in.net.sharad.utils"))
(require 'sheeple  #+clisp'("sheeple"))
(require 'in.net.sharad.pa-frontend-stumpwm  #+clisp'("in.net.sharad.pa-frontend-stumpwm"))

#+(or clisp ecl) (load "@PPCRE_PATH@/cl-ppcre.asd")
(asdf:oos 'asdf:load-op 'in.net.sharad.utils)
(asdf:oos 'asdf:load-op 'sheeple)
(asdf:oos 'asdf:load-op 'in.net.sharad.pa-frontend-stumpwm)
(asdf:oos 'asdf:load-op 'stumpwm)

#-ecl (stumpwm:set-module-dir "@MODULE_DIR@")

#+sbcl
(sb-ext:save-lisp-and-die "stumpwm" :toplevel (lambda ()
                                                ;; asdf requires sbcl_home to be set, so set it to the value when the image was built
                                                (sb-posix:putenv (format nil "SBCL_HOME=~A" #.(sb-ext:posix-getenv "SBCL_HOME")))
                                                (stumpwm:stumpwm)
                                                0)
                          :executable t)

#+clisp
(ext:saveinitmem "stumpwm" :init-function (lambda ()
                                            (stumpwm:stumpwm)
                                            (ext:quit))
                 :executable t :keep-global-handlers t :norc t :documentation "The StumpWM Executable")

#+ccl
(ccl:save-application "stumpwm" :prepend-kernel t :toplevel-function #'stumpwm:stumpwm)

#+ecl
(asdf:make-build 'stumpwm :type :program :monolithic t
                 :move-here "."
                 :name-suffix ""
                 :epilogue-code '(progn
                                  (stumpwm:set-module-dir "@MODULE_DIR@")
                                  (stumpwm:stumpwm)))

;;; if you want to save an image
#+(and lispworks)
(hcl:save-image "stumpwm"
                :multiprocessing t
                :environment nil
                :load-init-files t
                :restart-function (compile nil
                                           #'(lambda ()
                                               (stumpwm:stumpwm)
                                               (lw:quit :status 0))))

;;; if you want to save a standalone executable
#+(and lispworks nil)
(lw:deliver #'stumpwm:stumpwm "stumpwm" 0
            :interface nil
            :multiprocessing t
            :keep-pretty-printer t)
